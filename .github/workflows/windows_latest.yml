name: windows_latest

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest MinGW",
            os: windows-latest,
            artifact: "windows_mingw.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }

    steps:

      - name: install Dependencies Linux
        if: matrix.config.os == 'ubuntu-latest'
        run: sudo apt-get install libgtest-dev

      - name: Googletest installer
        if: matrix.config.os != 'windows-latest'
        uses: MarkusJx/googletest-installer@v1.1

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Ninja
        if: matrix.config.os == 'windows-latest'
        uses: ashutoshvarma/setup-ninja@master

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake Windows
        if: matrix.config.os == 'windows-latest'
        uses: ashutoshvarma/action-cmake-build@master
        with:
          build-dir: ${{ runner.workspace }}/build
          cc: ${{ matrix.config.cc }}
          cxx: ${{ matrix.config.cxx }}
          configure-options: -G Ninja
          build-type: Release
        #run: cmake "-DCMAKE_MAKE_PROGRAM=ninja" -G Ninja -S ..\.. -B .

      #- name: Build
      #  working-directory: ${{runner.workspace}}/build
      #  shell: bash
      #  run: cmake --build . --config ${{ matrix.config.build_type }} --target all

      - name: Test
        if: matrix.config.os != 'windows-latest'
        working-directory: ${{runner.workspace}}/build
        run: GTEST_OUTPUT=xml:test-results/ GTEST_COLOR=1 ctest -V

      - name: Upload test results
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: test_results_xml
          path: ${{runner.workspace}}/build/test-results/**/*.xml
        
      - name: Echo 1
        working-directory: ${{runner.workspace}}
        run: ls
      
      - name: Echo 2
        working-directory: ${{runner.workspace}}}\build
        run: ls
        
      - name: Echo 3
        working-directory: ${{runner.workspace}}\build\lib
        run: ls
        
      - name: Echo 4
        working-directory: ${{runner.workspace}}\build\lib\python_interface
        run: ls
        
      - name: Echo 5
        working-directory: ${{runner.workspace}}/build/lib
        run: ls
        
      - name: Rename py_instrument_control_lub
        working-directory: ${{runner.workspace}}\build\lib\python_interface
        run: move py_instrument_control_lib*.pyd py_instrument_control_lib.pyd
    
      - name: Upload py_instrument_control_lib.pyd
        uses: actions/upload-artifact@v2
        with:
          name: py_instrument_control_lib.pyd
          path: ${{runner.workspace}}\build\lib\python_interface\py_instrument_control_lib.pyd
